{"ast":null,"code":"var _jsxFileName = \"/Users/iainmccall/javascript_group_project/client/src/components/Graph.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst flights = [{\n  date: '2020-06-30',\n  footprint: '5000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2021-08',\n  footprint: '8000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2022',\n  footprint: '3000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2023',\n  footprint: '9000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}];\nconst averagePersonFlights = [{\n  date: '2020-06-30',\n  footprint: '3000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2021-08',\n  footprint: '6000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2022',\n  footprint: '4000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}, {\n  date: '2023',\n  footprint: '5000',\n  origin: 'GLA',\n  destination: 'ABZ'\n}];\nconst dates = flights.map(flight => {\n  return flight.date;\n});\nconst footprints = flights.map(flight => {\n  return flight.footprint;\n});\nconst footprints_2 = flights.map(flight => {\n  return flight.footprint + 2000;\n});\nconst data = [{\n  labels: dates\n}, {\n  datasets: footprints\n}];\nconsole.log(dates);\nconst ctx = document.getElementById('myChart');\nnew Chart(ctx, {\n  //   SETUP\n  type: 'line',\n  //   DATA\n\n  data: {\n    labels: dates,\n    datasets: [{\n      label: 'Carbon Footprint',\n      data: flights,\n      borderWidth: 1,\n      fill: true,\n      tension: 0.2,\n      parsing: {\n        xAxisKey: 'date',\n        yAxisKey: 'footprint'\n      }\n    }, {\n      label: 'Average Carbon Footprint',\n      data: averagePersonFlights,\n      borderWidth: 1,\n      fill: true,\n      tension: 0.3,\n      parsing: {\n        xAxisKey: 'date',\n        yAxisKey: 'footprint'\n      }\n    }]\n  },\n  options: {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'month'\n        }\n      },\n      y: {\n        beginAtZero: true\n      }\n    }\n  }\n});\nconst graph = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"graph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 15\n  }, this);\n};\nexport default graph;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","flights","date","footprint","origin","destination","averagePersonFlights","dates","map","flight","footprints","footprints_2","data","labels","datasets","console","log","ctx","document","getElementById","Chart","type","label","borderWidth","fill","tension","parsing","xAxisKey","yAxisKey","options","scales","x","time","unit","y","beginAtZero","graph","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/iainmccall/javascript_group_project/client/src/components/Graph.js"],"sourcesContent":["import React from 'react'\n\nconst flights = [{date: '2020-06-30', footprint: '5000', origin: 'GLA', destination: 'ABZ'}, {date: '2021-08', footprint: '8000', origin: 'GLA', destination: 'ABZ'},{date: '2022', footprint: '3000', origin: 'GLA', destination: 'ABZ'},{date: '2023', footprint: '9000', origin: 'GLA', destination: 'ABZ'}]\n\nconst averagePersonFlights = [{date: '2020-06-30', footprint: '3000', origin: 'GLA', destination: 'ABZ'}, {date: '2021-08', footprint: '6000', origin: 'GLA', destination: 'ABZ'},{date: '2022', footprint: '4000', origin: 'GLA', destination: 'ABZ'},{date: '2023', footprint: '5000', origin: 'GLA', destination: 'ABZ'}]\n        \n        const dates = flights.map((flight) => {\n          return flight.date;\n        })\n\n        const footprints = flights.map((flight) => {\n          return flight.footprint;\n        })\n\n        const footprints_2 = flights.map((flight) => {\n          return flight.footprint + 2000;\n        })\n\n        const data = [\n            {labels: dates},\n            {datasets: footprints}\n    ];\n        \n        console.log(dates)\n        \n        const ctx = document.getElementById('myChart');\n        new Chart(ctx, {\n        //   SETUP\n          type: 'line',\n\n        //   DATA\n    \n          data: {\n            labels: dates,\n            datasets: [{\n              label: 'Carbon Footprint',\n              data: flights,\n              borderWidth: 1,\n              fill: true, \n              tension: 0.2,\n              parsing: {\n                xAxisKey: 'date',\n                yAxisKey: 'footprint'\n              }\n            },{\n              label: 'Average Carbon Footprint',\n              data: averagePersonFlights,\n              borderWidth: 1,\n              fill: true, \n              tension: 0.3,\n              parsing: {\n                xAxisKey: 'date',\n                yAxisKey: 'footprint'\n              }\n            }\n        ]\n          },\n          options: {\n            scales: {\n                x: {\n                type: 'time',\n                time: {\n                    unit: 'month'\n                }\n              },\n              y: {\n                beginAtZero: true\n              },\n           \n            }\n          }\n        });\n\n        const graph = () => {\n            return (\n              <div>graph</div>\n            )\n          }\n          \n          export default graph"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,OAAO,GAAG,CAAC;EAACC,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAE;EAACH,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAC;EAACH,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAC;EAACH,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,CAAC;AAE/S,MAAMC,oBAAoB,GAAG,CAAC;EAACJ,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAE;EAACH,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAC;EAACH,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAC;EAACH,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE,MAAM;EAAEC,MAAM,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,CAAC;AAEpT,MAAME,KAAK,GAAGN,OAAO,CAACO,GAAG,CAAEC,MAAM,IAAK;EACpC,OAAOA,MAAM,CAACP,IAAI;AACpB,CAAC,CAAC;AAEF,MAAMQ,UAAU,GAAGT,OAAO,CAACO,GAAG,CAAEC,MAAM,IAAK;EACzC,OAAOA,MAAM,CAACN,SAAS;AACzB,CAAC,CAAC;AAEF,MAAMQ,YAAY,GAAGV,OAAO,CAACO,GAAG,CAAEC,MAAM,IAAK;EAC3C,OAAOA,MAAM,CAACN,SAAS,GAAG,IAAI;AAChC,CAAC,CAAC;AAEF,MAAMS,IAAI,GAAG,CACT;EAACC,MAAM,EAAEN;AAAK,CAAC,EACf;EAACO,QAAQ,EAAEJ;AAAU,CAAC,CAC7B;AAEGK,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC;AAElB,MAAMU,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;AAC9C,IAAIC,KAAK,CAACH,GAAG,EAAE;EACf;EACEI,IAAI,EAAE,MAAM;EAEd;;EAEET,IAAI,EAAE;IACJC,MAAM,EAAEN,KAAK;IACbO,QAAQ,EAAE,CAAC;MACTQ,KAAK,EAAE,kBAAkB;MACzBV,IAAI,EAAEX,OAAO;MACbsB,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,GAAG;MACZC,OAAO,EAAE;QACPC,QAAQ,EAAE,MAAM;QAChBC,QAAQ,EAAE;MACZ;IACF,CAAC,EAAC;MACAN,KAAK,EAAE,0BAA0B;MACjCV,IAAI,EAAEN,oBAAoB;MAC1BiB,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,GAAG;MACZC,OAAO,EAAE;QACPC,QAAQ,EAAE,MAAM;QAChBC,QAAQ,EAAE;MACZ;IACF,CAAC;EAEH,CAAC;EACDC,OAAO,EAAE;IACPC,MAAM,EAAE;MACJC,CAAC,EAAE;QACHV,IAAI,EAAE,MAAM;QACZW,IAAI,EAAE;UACFC,IAAI,EAAE;QACV;MACF,CAAC;MACDC,CAAC,EAAE;QACDC,WAAW,EAAE;MACf;IAEF;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAChB,oBACEpC,OAAA;IAAAqC,QAAA,EAAK;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEpB,CAAC;AAED,eAAeL,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}